import { useState } from "react";
import { Link } from "wouter";
import { 
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableHeader,
  TableRow,
} from "@/components/ui/table";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { 
  Pagination,
  PaginationContent,
  PaginationItem,
  PaginationLink,
  PaginationNext,
  PaginationPrevious,
} from "@/components/ui/pagination";
import { Button } from "@/components/ui/button";
import { useToast } from "@/hooks/use-toast";
import { Skeleton } from "@/components/ui/skeleton";
import { type Risk } from "@shared/schema";
import { 
  RiskLevel, 
  calculateRiskRating 
} from "@/lib/utils/riskCalculations";

interface RiskTableProps {
  risks: Risk[];
  isLoading: boolean;
  onEdit: (risk: Risk) => void;
  onDelete: (risk: Risk) => void;
  onConvertToIssue: (risk: Risk) => void;
}

type SortField = 'priorityRank' | 'riskId' | 'openDate' | 'raisedBy' | 'ownedBy' | 'riskCause' | 'riskEvent' | 'riskEffect' | 'riskCategory' | 'probability' | 'impact' | 'riskRating' | 'riskStatus';
type SortOrder = 'asc' | 'desc';

export default function RiskTable({ risks, isLoading, onEdit, onDelete, onConvertToIssue }: RiskTableProps) {
  const { toast } = useToast();
  const [sortField, setSortField] = useState<SortField>('priorityRank');
  const [sortOrder, setSortOrder] = useState<SortOrder>('asc');
  const [page, setPage] = useState(1);
  const [pageSize, setPageSize] = useState(25);
  
  // Sort risks
  const sortedRisks = [...risks].sort((a, b) => {
    let aValue: any = a[sortField];
    let bValue: any = b[sortField];
    
    // Handle special cases
    if (sortField === 'openDate') {
      aValue = new Date(a.openDate).getTime();
      bValue = new Date(b.openDate).getTime();
    }
    
    // Convert string values to lowercase for case-insensitive sorting
    if (typeof aValue === 'string') aValue = aValue.toLowerCase();
    if (typeof bValue === 'string') bValue = bValue.toLowerCase();
    
    // Handle null or undefined values
    if (aValue === null || aValue === undefined) return sortOrder === 'asc' ? -1 : 1;
    if (bValue === null || bValue === undefined) return sortOrder === 'asc' ? 1 : -1;
    
    // Compare values
    if (aValue < bValue) return sortOrder === 'asc' ? -1 : 1;
    if (aValue > bValue) return sortOrder === 'asc' ? 1 : -1;
    return 0;
  });
  
  // Calculate pagination
  const totalRisks = sortedRisks.length;
  const totalPages = Math.ceil(totalRisks / pageSize);
  const startIndex = (page - 1) * pageSize;
  const endIndex = Math.min(startIndex + pageSize, totalRisks);
  const displayRisks = sortedRisks.slice(startIndex, endIndex);
  
  // Get risk level for a given risk rating
  const getRiskLevel = (rating: number): RiskLevel => {
    if (rating < 30) return 'low';
    if (rating < 60) return 'medium';
    return 'high';
  };
  
  // Handle sorting
  const handleSort = (field: SortField) => {
    if (sortField === field) {
      // Toggle sort order if clicking the same field
      setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc');
    } else {
      // Set new sort field and default to ascending
      setSortField(field);
      setSortOrder('asc');
    }
  };
  
  // Get sort icon
  const getSortIcon = (field: SortField) => {
    if (sortField !== field) {
      return (
        <svg
          xmlns="http://www.w3.org/2000/svg"
          width="16"
          height="16"
          viewBox="0 0 24 24"
          fill="none"
          stroke="currentColor"
          strokeWidth="2"
          strokeLinecap="round"
          strokeLinejoin="round"
          className="ml-1 text-neutral-300"
        >
          <path d="m7 15 5 5 5-5" />
          <path d="m7 9 5-5 5 5" />
        </svg>
      );
    }
    
    return sortOrder === 'asc' ? (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        className="ml-1 text-blue-600"
      >
        <path d="m7 15 5 5 5-5" />
      </svg>
    ) : (
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="16"
        height="16"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        className="ml-1 text-blue-600"
      >
        <path d="m7 9 5-5 5 5" />
      </svg>
    );
  };
  
  return (
    <div className="bg-white border border-neutral-200 rounded-lg shadow-sm mb-6 overflow-hidden">
      <div className="flex flex-col">
        {/* Table container with scrolling */}
        <div style={{ height: "calc(100vh - 28rem)" }} className="overflow-y-auto">
          <Table>
              <TableHeader className="bg-neutral-100 sticky top-0 z-10">
                <TableRow>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('priorityRank')}>
                    <div className="flex items-center">
                      <span>Priority</span>
                      {getSortIcon('priorityRank')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('riskId')}>
                    <div className="flex items-center">
                      <span>Risk ID</span>
                      {getSortIcon('riskId')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('openDate')}>
                    <div className="flex items-center">
                      <span>Open Date</span>
                      {getSortIcon('openDate')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('ownedBy')}>
                    <div className="flex items-center">
                      <span>Owned By</span>
                      {getSortIcon('ownedBy')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('riskCause')}>
                    <div className="flex items-center">
                      <span>Risk Cause</span>
                      {getSortIcon('riskCause')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('riskEvent')}>
                    <div className="flex items-center">
                      <span>Risk Event</span>
                      {getSortIcon('riskEvent')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('riskEffect')}>
                    <div className="flex items-center">
                      <span>Risk Effect</span>
                      {getSortIcon('riskEffect')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('riskCategory')}>
                    <div className="flex items-center">
                      <span>Category</span>
                      {getSortIcon('riskCategory')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('probability')}>
                    <div className="flex items-center">
                      <span>Prob (%)</span>
                      {getSortIcon('probability')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('impact')}>
                    <div className="flex items-center">
                      <span>Impact</span>
                      {getSortIcon('impact')}
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('riskRating')}>
                    <div className="flex items-center">
                      <span>Rating</span>
                      {getSortIcon('riskRating')}
                    </div>
                  </TableHead>
                  <TableHead>
                    <div className="flex items-center">
                      <span>Response</span>
                    </div>
                  </TableHead>
                  <TableHead className="cursor-pointer" onClick={() => handleSort('riskStatus')}>
                    <div className="flex items-center">
                      <span>Status</span>
                      {getSortIcon('riskStatus')}
                    </div>
                  </TableHead>
                  <TableHead>
                    <span>Actions</span>
                  </TableHead>
                </TableRow>
              </TableHeader>
              
              <TableBody>
                {isLoading ? (
                  // Loading state
                  Array.from({ length: 5 }).map((_, index) => (
                    <TableRow key={`skeleton-${index}`}>
                      <TableCell colSpan={16}>
                        <Skeleton className="h-5 w-full" />
                      </TableCell>
                    </TableRow>
                  ))
                ) : displayRisks.length > 0 ? (
                  // Risk rows
                  displayRisks.map((risk) => {
                    // Calculate risk rating using the utility function
                    const riskRating = risk.riskRating || 
                      (risk.probability && risk.impact ? 
                        calculateRiskRating(risk.probability, risk.impact, risk.responseStrategy, risk.riskStatus) : 
                        0);
                    
                    const riskLevel = getRiskLevel(riskRating);
                    
                    return (
                      <TableRow key={risk.id} className="hover:bg-neutral-50">
                        <TableCell className="font-medium text-center">
                          {risk.priorityRank}
                        </TableCell>
                        <TableCell>
                          <span className="font-medium">{risk.riskId}</span>
                        </TableCell>
                        <TableCell className="text-neutral-400">
                          {new Date(risk.openDate).toLocaleDateString()}
                        </TableCell>
                        <TableCell className="text-neutral-400">
                          {risk.ownedBy}
                        </TableCell>
                        <TableCell className="text-neutral-400">
                          <div className="max-w-xs truncate" title={risk.riskCause}>
                            {risk.riskCause}
                          </div>
                        </TableCell>
                        <TableCell className="text-neutral-400">
                          <div className="max-w-xs truncate" title={risk.riskEvent}>
                            {risk.riskEvent}
                          </div>
                        </TableCell>
                        <TableCell className="text-neutral-400">
                          <div className="max-w-xs truncate" title={risk.riskEffect}>
                            {risk.riskEffect}
                          </div>
                        </TableCell>
                        <TableCell className="text-neutral-400">
                          {risk.riskCategory}
                        </TableCell>
                        <TableCell className="text-neutral-400">
                          {Math.round(risk.probability * 100)}%
                        </TableCell>
                        <TableCell className="text-neutral-400">
                          {risk.impact}/10
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center space-x-1.5">
                            <div 
                              className={`w-6 h-6 rounded-full flex items-center justify-center text-white text-xs font-medium
                                ${riskLevel === 'low' ? 'bg-green-500' : 
                                  riskLevel === 'medium' ? 'bg-yellow-500' : 
                                  'bg-red-500'}`}
                            >
                              {Math.round(riskRating)}
                            </div>
                            <span className={`text-xs font-medium
                              ${riskLevel === 'low' ? 'text-green-600' : 
                                riskLevel === 'medium' ? 'text-yellow-600' : 
                                'text-red-600'}`}>
                              {riskLevel === 'low' ? 'Low' : 
                                riskLevel === 'medium' ? 'Med' : 
                                'High'}
                            </span>
                          </div>
                        </TableCell>
                        <TableCell className="text-neutral-400">
                          {risk.responseStrategy}
                        </TableCell>
                        <TableCell>
                          <span className={`px-2 py-1 rounded-full text-xs font-medium
                            ${risk.riskStatus === 'Active' ? 'bg-red-100 text-red-800' : 
                              risk.riskStatus === 'Monitoring' ? 'bg-blue-100 text-blue-800' : 
                              risk.riskStatus === 'In Progress' ? 'bg-yellow-100 text-yellow-800' : 
                              risk.riskStatus === 'Eventuated' ? 'bg-purple-100 text-purple-800' :
                              'bg-green-100 text-green-800'}`}>
                            {risk.riskStatus}
                          </span>
                        </TableCell>
                        <TableCell className="text-neutral-400">
                          <div className="max-w-xs truncate" title={risk.mitigation}>
                            {risk.mitigation}
                          </div>
                        </TableCell>
                        <TableCell>
                          <div className="flex items-center space-x-2">
                            <Button 
                              variant="ghost" 
                              size="sm" 
                              onClick={() => onEdit(risk)}
                              className="text-[#0066CC] hover:text-[#0D47A1] transition-colors h-8 w-8 p-0"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <path d="M11 4H4a2 2 0 0 0-2 2v14a2 2 0 0 0 2 2h14a2 2 0 0 0 2-2v-7" />
                                <path d="M18.5 2.5a2.121 2.121 0 0 1 3 3L12 15l-4 1 1-4 9.5-9.5z" />
                              </svg>
                            </Button>
                            <Button 
                              variant="ghost"
                              size="sm"
                              onClick={() => onDelete(risk)}
                              className="text-neutral-300 hover:text-neutral-400 transition-colors h-8 w-8 p-0"
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <path d="M3 6h18" />
                                <path d="M19 6v14a2 2 0 0 1-2 2H7a2 2 0 0 1-2-2V6" />
                                <path d="M8 6V4a2 2 0 0 1 2-2h4a2 2 0 0 1 2 2v2" />
                                <line x1="10" y1="11" x2="10" y2="17" />
                                <line x1="14" y1="11" x2="14" y2="17" />
                              </svg>
                            </Button>
                            <Button 
                              variant="ghost"
                              size="sm"
                              onClick={() => onConvertToIssue(risk)}
                              className={`transition-colors h-8 w-8 p-0 ${
                                risk.issueId ? 'text-neutral-200 cursor-not-allowed' : 'text-purple-400 hover:text-purple-600'
                              }`}
                              disabled={!!risk.issueId}
                              title={risk.issueId ? `Already linked to issue ${risk.issueId}` : "Convert to Issue"}
                            >
                              <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" strokeWidth="2" strokeLinecap="round" strokeLinejoin="round">
                                <path d="M19 14a1 1 0 0 0-1.993.117L17 14.25v3.25a2.5 2.5 0 0 1-2.336 2.495L14.5 20H7.5a2.5 2.5 0 0 1-2.495-2.336L5 17.5v-9a2.5 2.5 0 0 1 2.336-2.495L7.5 6h7a2.5 2.5 0 0 1 2.495 2.336L17 8.5v.25a1 1 0 0 0 1.993.117L19 8.75V8.5a4.5 4.5 0 0 0-4.288-4.495L14.5 4h-7a4.5 4.5 0 0 0-4.495 4.288L3 8.5v9a4.5 4.5 0 0 0 4.288 4.495L7.5 22h7a4.5 4.5 0 0 0 4.495-4.288L19 17.5v-3.25a1 1 0 0 0-1-1zM14 7a1 1 0 0 1 .117 1.993L14 9h-4a1 1 0 0 1-.117-1.993L10 7h4zM13 11a1 1 0 1 1 0 2H7a1 1 0 1 1 0-2h6zM13 15a1 1 0 1 1 0 2H7a1 1 0 1 1 0-2h6z"></path>
                                <path d="M20.121 4.879a3 3 0 0 1 4.108 4.371l-.108.124-3.714 3.714a2.503 2.503 0 0 1-1.173.678l-.175.04-2.343.391a.5.5 0 0 1-.575-.575l.007-.042.39-2.343a2.492 2.492 0 0 1 .55-1.174l.083-.083.085-.079 3.714-3.714a3 3 0 0 1 .15-1.308zM22 8.586l-3.007 3.007a.5.5 0 0 0-.114.22l-.014.074-.282 1.701 1.7-.282a.5.5 0 0 0 .084-.023l.066-.031.144-.09 3.007-3.007-1.584-1.569zm.707-2.293l-.096-.083-1.433 1.432 1.585 1.57 1.359-1.36a1 1 0 0 0-1.319-1.465l-.096.083-.096.083.096-.083a1 1 0 0 0-.096-.083l.096.083z"></path>
                              </svg>
                            </Button>
                          </div>
                        </TableCell>
                      </TableRow>
                    );
                  })
                ) : (
                  <TableRow>
                    <TableCell colSpan={16} className="text-center py-6 text-neutral-400">
                      No risks found
                    </TableCell>
                  </TableRow>
                )}
              </TableBody>
            </Table>
          </div>
        </div>
        
        {/* Pagination controls in sticky footer */}
        <div className="border-t border-neutral-200 bg-white sticky bottom-0 left-0 right-0 z-10">
          <div className="px-4 py-3 flex flex-col sm:flex-row items-center justify-between">
            <div className="flex items-center mb-3 sm:mb-0">
              <label className="text-sm text-neutral-400 mr-2">Show</label>
              <Select value={pageSize.toString()} onValueChange={(value) => {
                setPageSize(parseInt(value, 10));
                setPage(1); // Reset to first page when changing page size
              }}>
                <SelectTrigger className="h-8 w-16">
                  <SelectValue/>
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="10">10</SelectItem>
                  <SelectItem value="25">25</SelectItem>
                  <SelectItem value="50">50</SelectItem>
                  <SelectItem value="100">100</SelectItem>
                </SelectContent>
              </Select>
              <span className="text-sm text-neutral-400 ml-2">entries</span>
            </div>
            
            <Pagination>
              <PaginationContent>
                <PaginationItem>
                  <PaginationPrevious 
                    onClick={() => page > 1 && setPage(page - 1)}
                    className={page === 1 ? 'pointer-events-none opacity-50' : ''}
                  />
                </PaginationItem>
                
                {[...Array(Math.min(5, totalPages))].map((_, i) => {
                  const pageNumber = page <= 3
                    ? i + 1
                    : page >= totalPages - 2
                      ? totalPages - 4 + i
                      : page - 2 + i;
                  
                  if (pageNumber <= 0 || pageNumber > totalPages) return null;
                  
                  return (
                    <PaginationItem key={pageNumber}>
                      <PaginationLink
                        onClick={() => setPage(pageNumber)}
                        isActive={page === pageNumber}
                      >
                        {pageNumber}
                      </PaginationLink>
                    </PaginationItem>
                  );
                })}
                
                <PaginationItem>
                  <PaginationNext 
                    onClick={() => page < totalPages && setPage(page + 1)}
                    className={page === totalPages ? 'pointer-events-none opacity-50' : ''}
                  />
                </PaginationItem>
              </PaginationContent>
            </Pagination>
          </div>
        </div>
      </div>
    </div>
  );
}