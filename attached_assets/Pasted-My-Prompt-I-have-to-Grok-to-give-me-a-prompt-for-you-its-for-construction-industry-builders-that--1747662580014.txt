My Prompt I have to Grok to give me a prompt for you


its for construction industry, builders that get finance, deal with government entities thought multiple states in Australia, develop government housing which have a lot of regulations to them etc etc. when doing these type of things you have document manuals, which based on finance type, construction type, type of building, how it will be rented on government assistance ppl etc that guide you through the process and the entities and  the risks involved etc.
what I want to do is create a tool to be able to create one of these documents in sections and sub sections. so a page will come up and on the left side there will be a tree view looking like a table of contents would in work when on the side it says 1 heading 1,1, Another Heading 2 another heading etc. you can create and edit and delete these from my manual creator. on the right hand side will be a blank space, I want to be able to add content to this side. so I would create a section or sub section, select it and on the right hand side I will create some form of content a popup will appear using syncfusions RichTextEditor with all functionality that can be used in that. I will add content and be able to assign what type of content it is, General Content, Tender, Notes etc, these categories will come from a table in a database, then on top of that I will be able to select what states that content applies to being able to choose one or multiple states from australia. Once the dialog is saved and closed it should be saved to another table and linked to that specific section. the table with the content should also have an order ID for reasons I will explain now.
the user will be able to add multiple content to the same section. so when a section is clicked on and displayed the right hand side of the screen will be a viewer and the multiple content will be displayed there but each content will be in a framed square with the title of the content and what states it applies to. the header will be a different colour background to distinguish it as a container. in the box the content will be rendered in html so the user can view. the content using Syncfusion richtexteditor will save and load in sfdt, however that will need to be converted as html to be rendered into the content box. each content box will be big enough to show the entire content and if there are multiple contents they will be shown one under the other. thes content boxes can be editable by clicking on an edit icon on the content container box and if its editable then the RichtTextEditor dialog box appears allowing the user to edit and save it. since there are multiple content boxes per section, there will need to be the ability to change the order of the content boxes and how they displayed on screen, thats why I need the orderID field. with all that information please work what I need to create this, what frameworks and database tables and layouts and fields and give me a full prompt that I can share with my coding AI in replit so it can make this




]
This is the prompt that grok gave me to give to you

am building a web application for the construction industry using React with TypeScript for the frontend and Node.js with ExpressJS for the backend, hosted on Replit. The app needs a new feature: a document manual creation tool for builders dealing with finance, government entities, and regulations across Australian states. The tool allows users to create manuals with sections and subsections, add categorized content using Syncfusion’s RichTextEditor, assign Australian states, and display multiple content items per section with reordering. Here’s the detailed implementation plan:
Requirements
1. Frontend (React with TypeScript):
    * UI Layout:
        * Left side: A Syncfusion TreeView component displaying a table of contents with sections and subsections (e.g., "1. Heading", "1.1. Subheading"). Users can create, edit, or delete sections/subsections via context menu or buttons.
        * Right side: A content viewer displaying content boxes for the selected section. Each box has a header (title, content type, applicable states) with a distinct background color (use Tailwind CSS), HTML-rendered content, and an edit icon.
        * Popup: A Syncfusion Dialog with the RichTextEditor for creating/editing content, a dropdown for content type (e.g., General Content, Tender), a multi-select for Australian states, and save/cancel buttons.
    * Functionality:
        * Create/edit/delete sections/subsections in the TreeView, updating the backend.
        * Add content to a section via the dialog. Save content in SFDT format (from RichTextEditor) and convert to HTML for rendering. Assign content type and states.
        * Display multiple content boxes per section, each showing title, type, states, and HTML content. Boxes are vertically stacked, sized to fit content.
        * Edit content by clicking the edit icon, reopening the dialog with pre-filled data.
        * Reorder content boxes using drag-and-drop (use react-dnd or react-sortable-hoc), updating the order_id in the backend.
    * Use Axios for API calls, Tailwind CSS for styling, and ensure TypeScript type safety.
2. Backend (Node.js with ExpressJS):
    * Database: Use PostgreSQL with the following schema:
        * manuals: id (PK), title, created_at.
        * sections: id (PK), manual_id (FK), parent_id (FK, nullable), title.
        * content_types: id (PK), name (unique).
        * states: id (PK), name (unique).
        * contents: id (PK), section_id (FK), content_type_id (FK), sfdt_data (text), html_data (text), order_id (integer), created_at.
        * content_states: content_id (FK), state_id (FK), composite PK.
    * ORM: Use TypeORM or Prisma for database interactions.
    * APIs:
        * GET /manuals: List all manuals.
        * POST /manuals: Create a manual (title).
        * GET /sections/:manualId: List sections for a manual (hierarchical).
        * POST /sections: Create a section (manual_id, parent_id, title).
        * PUT /sections/:id: Update a section (title).
        * DELETE /sections/:id: Delete a section and its contents.
        * GET /content-types: List content types.
        * GET /states: List Australian states (NSW, VIC, QLD, SA, WA, TAS, ACT, NT).
        * POST /contents: Create content (section_id, content_type_id, sfdt_data, html_data, state_ids, order_id).
        * GET /contents/:sectionId: List contents for a section, ordered by order_id.
        * PUT /contents/:id: Update content (content_type_id, sfdt_data, html_data, state_ids).
        * DELETE /contents/:id: Delete content.
        * PUT /contents/reorder: Update order_id for multiple contents (pass array of {content_id, order_id}).
    * Middleware:
        * Authentication (assume JWT-based, validate user session).
        * Input validation using express-validator.
        * SFDT-to-HTML conversion (use Syncfusion’s server-side utilities or client-side if feasible).
    * Ensure APIs return JSON responses with proper status codes.
3. Integration:
    * Initialize content_types with values: General Content, Tender, Notes.
    * Initialize states with Australian states: NSW, VIC, QLD, SA, WA, TAS, ACT, NT.
    * Convert SFDT to HTML when saving content (use Syncfusion’s API or library).
    * Ensure content boxes render HTML securely (sanitize HTML to prevent XSS).
4. File Structure:
    * Extend my existing structure (assume src/client for React, src/server for Express).
    * Frontend:
        * src/client/components/ManualEditor: ManualEditor.tsx, TreeView.tsx, ContentViewer.tsx, ContentBox.tsx, ContentDialog.tsx.
        * src/client/types: manual.ts, section.ts, content.ts.
        * src/client/services: api.ts (Axios calls).
    * Backend:
        * src/server/routes: manuals.ts, sections.ts, contents.ts.
        * src/server/models: manual.ts, section.ts, content.ts, contentType.ts, state.ts.
        * src/server/services: sfdtConverter.ts.
        * src/server/db: database.ts (TypeORM/Prisma setup).
5. Best Practices:
    * Use TypeScript interfaces for all data models.
    * Implement error handling (frontend alerts, backend error responses).
    * Sanitize HTML output (use DOMPurify).
    * Optimize performance (lazy-load TreeView, paginate content if needed).
    * Secure APIs (validate inputs, prevent SQL injection).
    * Comment code for clarity.
6. Testing:
    * Provide unit tests for key components (use Jest for React, Mocha/Chai for Express).
    * Test TreeView interactions, content creation/editing, and reordering.
    * Test API endpoints with Postman scripts or Supertest.
Instructions
* Adapt the implementation to my existing React, TypeScript, Node.js, and ExpressJS app on Replit.
* Use Syncfusion RichTextEditor, TreeView, and Dialog (via @syncfusion/ej2-react-* packages).
* Use Tailwind CSS for styling (via CDN or npm).
* Use react-dnd or react-sortable-hoc for drag-and-drop.
* Set up PostgreSQL (use Replit’s database or external if needed).
* Install dependencies: @syncfusion/ej2-react-richtexteditor, @syncfusion/ej2-react-navigations, @syncfusion/ej2-react-popups, axios, react-dnd, typeorm (or prisma), express-validator, dompurify.
* Provide setup instructions for Syncfusion and database configuration.
* Ensure the code is modular, reusable, and follows my app’s conventions (assume RESTful APIs and component-based React).
* Generate the complete code, including frontend components, backend routes, database setup, and tests.
* If assumptions are made (e.g., auth setup), note them and provide placeholders.
